{"version":3,"sources":["Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Todolist","props","useState","title","setTitle","error","setError","addTask","trim","id","onClick","removeTodoList","value","onChange","e","currentTarget","onKeyPress","charCode","className","tasks","map","t","key","isDone","type","checked","changeStatus","removeTask","filter","changFilter","App","todoListID1","v1","todoListID2","todolists","setTodolists","setTasks","todoListID","newTask","todolist","taskID","filteredTodoList","tl","console","log","newTodoList","task","find","allTodoListTasks","taskForTodoList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.84b6a52c.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {FilterValueType} from \"./App\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValueType\r\n    removeTask: (taskID: string, todoListID: string) => void\r\n    changFilter: (value: FilterValueType, todoListID: string) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n    changeStatus: (taskID: string, isDone: boolean, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addTask = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addTask(title, props.id)\r\n            setTitle(\"\")\r\n        } else setError(\"Tittle is required\")\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onPressHandler = ((e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (e.charCode === 13) {\r\n            addTask()\r\n        }\r\n    })\r\n    const onAllCliCkHandler = () => {\r\n        props.changFilter('all', props.id)\r\n    }\r\n    const onActiveClickHandler = () => {\r\n        props.changFilter('active', props.id)\r\n    }\r\n    const onCompletedClickHandler = () => {\r\n        props.changFilter('comleted', props.id)\r\n    }\r\n    const removeTodoList = () => {\r\n        props.removeTodoList(props.id)\r\n    }\r\n    return <div>\r\n\r\n        <h3>{props.title}\r\n            <button onClick={removeTodoList}> x</button>\r\n        </h3>\r\n        <div>\r\n            <input\r\n                value={title} onChange={onChangeHandler}\r\n                onKeyPress={onPressHandler}\r\n                className={error ? \"error\" : \"\"}\r\n\r\n            />\r\n\r\n            <button onClick={addTask}>+</button>\r\n            {error && <div className={\"error-message\"}>{error}</div>}\r\n        </div>\r\n        <ul>\r\n            {\r\n                props.tasks.map(t => {\r\n                    const onClickHandler = () => {\r\n                        props.removeTask(t.id, props.id)\r\n                    }\r\n                    const changeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        props.changeStatus(t.id, e.currentTarget.checked, props.id)\r\n                    }\r\n                    return (\r\n                        <li key={t.id} className={t.isDone ? \"isDone\" : \"\"}>\r\n                            <\r\n                                input type=\"checkbox\" checked={t.isDone}\r\n                                      onChange={changeStatus}\r\n                            />\r\n                            <span>{t.title}</span>\r\n                            <button onClick={onClickHandler}> x</button>\r\n                        </li>\r\n                    )\r\n                })\r\n            }\r\n\r\n        </ul>\r\n        <div>\r\n            <button className={props.filter === \"all\" ? \"active\" : \"\"}\r\n                    onClick={onAllCliCkHandler}>All\r\n            </button>\r\n            <button className={props.filter === \"active\" ? \"active\" : \"\"}\r\n                    onClick={onActiveClickHandler}>Active\r\n            </button>\r\n            <button className={props.filter === \"comleted\" ? \"active\" : \"\"}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </button>\r\n        </div>\r\n    </div>\r\n}\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from \"uuid\";\r\n\r\nexport type FilterValueType = 'all' | 'active' | 'comleted'\r\ntype TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValueType\r\n}\r\ntype TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n\r\n    const [filter, setfilter] = useState<FilterValueType>(\"all\")\r\n\r\n    const todoListID1 = v1()\r\n    const todoListID2 = v1()\r\n    const [todolists, setTodolists] = useState<Array<TodolistType>>([\r\n        {id: todoListID1, title: \"What to learn\", filter: 'all'},\r\n        {id: todoListID2, title: \"What to buy\", filter: 'active'}\r\n\r\n    ])\r\n    const [tasks, setTasks] = useState<TaskStateType>({\r\n        [todoListID1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"Redux\", isDone: false},\r\n            {id: v1(), title: \"Rest API\", isDone: false},\r\n\r\n        ],\r\n        [todoListID2]: [\r\n            {id: v1(), title: \"Milk\", isDone: false},\r\n            {id: v1(), title: \"Apple\", isDone: false},\r\n            {id: v1(), title: \"Orange\", isDone: false},\r\n        ]\r\n    })\r\n\r\n\r\n    function addTask(title: string, todoListID: string) {\r\n\r\n        let newTask: TaskType = {id: v1(), title: title, isDone: false}\r\n        const todolist = tasks[todoListID]\r\n        tasks[todoListID] = [newTask, ...todolist]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function removeTask(taskID: string, todoListID: string) {\r\n        const todolist = tasks[todoListID]\r\n        tasks[todoListID] = todolist.filter(t => t.id !== taskID)\r\n        setTasks({...tasks})\r\n\r\n    }\r\n\r\n    function removeTodoList(todoListID: string) {\r\n        let filteredTodoList = todolists.filter(tl => tl.id !== todoListID)\r\n        setTodolists(filteredTodoList)\r\n       let deletedTasks = delete tasks[todoListID]\r\n        setTasks({...tasks})\r\n        console.log(tasks)\r\n\r\n    }\r\n\r\n    function changeStatus(taskID: string, isDone: boolean, todoListID: string) {\r\n        const todolist = tasks[todoListID]\r\n        let newTodoList = todolist.map(task => {\r\n            if (task.id === taskID) {\r\n                return {...task, isDone: isDone}\r\n            }\r\n            return task\r\n        })\r\n        tasks[todoListID] = newTodoList\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function changFilter(value: FilterValueType, todoListID: string) {\r\n        const todolist = todolists.find(tl => tl.id === todoListID)\r\n        if (todolist) {\r\n            todolist.filter = value\r\n            setTodolists([...todolists])\r\n\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodoListTasks = tasks[tl.id]\r\n                    let taskForTodoList = allTodoListTasks;\r\n                    if (tl.filter === 'active') {\r\n                        taskForTodoList = allTodoListTasks.filter(t => t.isDone === false)\r\n                    }\r\n                    if (tl.filter === 'comleted') {\r\n                        taskForTodoList = allTodoListTasks.filter(t => t.isDone === true)\r\n                    }\r\n                    return (\r\n                        <Todolist\r\n                            key={tl.id}\r\n                            id={tl.id}\r\n                            title={tl.title}\r\n                            tasks={taskForTodoList}\r\n                            removeTask={removeTask}\r\n                            changFilter={changFilter}\r\n                            addTask={addTask}\r\n                            changeStatus={changeStatus}\r\n                            removeTodoList={removeTodoList}\r\n                            filter={tl.filter}/>\r\n\r\n                    )\r\n                })\r\n            }\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}