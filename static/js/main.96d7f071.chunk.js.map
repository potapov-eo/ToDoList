{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","button","margin","spacing","AddItemForm","props","useState","title","setTitle","error","setError","addTask","trim","addItem","TextField","label","variant","value","onChange","e","currentTarget","onKeyPress","charCode","helperText","IconButton","size","color","onClick","EditableSpan","editMode","seteditMode","activateViewMode","autoFocus","onBlur","onDoubleClick","Todolist","newTitle","changeTodolistTitle","id","Button","removeTodoList","Delete","tasks","map","t","key","className","isDone","Checkbox","defaultChecked","inputProps","checked","changeStatus","changeTaskTitle","removeTask","style","padding","filter","changFilter","createStyles","root","flexGrow","menuButton","marginRight","App","todoListID1","v1","todoListID2","todolists","setTodolists","setTasks","todoListID","newTask","todolist","taskID","filteredTodoList","tl","console","log","newTodoList","task","find","todoList","classes","Container","fixed","AppBar","position","Toolbar","edge","aria-label","Typography","Grid","container","allTodoListTasks","taskForTodoList","item","Paper","elevation","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.96d7f071.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {Button, Icon, IconButton, TextField} from \"@material-ui/core\";\nimport {makeStyles} from '@material-ui/core/styles';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport SaveIcon from '@material-ui/icons/Save';\nimport {AddBox, TextFields} from \"@material-ui/icons\";\nimport AddBoxIcon from '@material-ui/icons/AddBox';\n\n\nconst useStyles = makeStyles((theme) => ({\n    button: {\n        margin: theme.spacing(1),\n    },\n}));\n\n\ntype AddItemFormPropsType = {\n    addItem: (title: string,) => void\n\n}\n\nexport function AddItemForm(props: AddItemFormPropsType) {\n    const classes = useStyles();\n    let [title, setTitle] = useState(\"\")\n    let [error, setError] = useState<string | null>(null)\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n    const onPressHandler = ((e: KeyboardEvent<HTMLInputElement>) => {\n        setError(null)\n        if (e.charCode === 13) {\n            addTask()\n        }\n    })\n    const addTask = () => {\n        if (title.trim() !== \"\") {\n            props.addItem(title)\n            setTitle(\"\")\n        } else setError(\"Tittle is required\")\n    }\n\n    return <div>\n        {/*<input\n            value={title} onChange={onChangeHandler}\n            onKeyPress={onPressHandler}\n            className={error ? \"error\" : \"\"}\n        />*/}\n        <TextField\n            label={'Type value'}\n            variant={\"outlined\"}\n            value={title} onChange={onChangeHandler}\n            onKeyPress={onPressHandler}\n            error={!!error}\n            helperText={error}\n        />\n\n\n\n        {/* <button onClick={addTask}>+</button>*/}\n\n        <IconButton\n            size=\"medium\"\n            color=\"primary\"\n            onClick={addTask}>\n            <AddCircleIcon/>\n        </IconButton>\n       {/* {error && <div className={\"error-message\"}>{error}</div>}*/}\n    </div>\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {TextField} from \"@material-ui/core\";\n\ntype EditableSpanPropsType = {\n    title: string\n    onChange:(newTitle:string)=>void\n}\n\nexport function EditableSpan(props: EditableSpanPropsType) {\n   let[editMode, seteditMode]=useState <boolean>(false)\n    let [error, setError] = useState<string | null>(null)\n    let [title, setTitle] = useState<string >(\"\")\n    const activateEditMode = () => {\n       seteditMode(true)\n        setTitle(props.title)}\n    const activateViewMode = () => {\n       if (title.trim() !== \"\"){seteditMode(false)\n        props.onChange(title)}else\n           setError(\"Tittle is required\")\n    }\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n    const onPressHandler = ((e: KeyboardEvent<HTMLInputElement>) => {\n        setError(null)\n        if (e.charCode === 13) {\n            if (title.trim() !== \"\") {activateViewMode()}else\n                setError(\"Tittle is required\")\n        }\n    })\n    return editMode\n        ?  <TextField\n            autoFocus\n            onBlur={activateViewMode}\n            value={title} onChange={onChangeHandler}\n            onKeyPress={onPressHandler}\n            error={!!error }\n            helperText={error}\n        />\n        :<span onDoubleClick={activateEditMode}>{props.title}</span>\n}","import React, {ChangeEvent} from 'react';\r\nimport {FilterValueType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, Checkbox} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValueType\r\n    removeTask: (taskID: string, todoListID: string) => void\r\n    changFilter: (value: FilterValueType, todoListID: string) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n    changeStatus: (taskID: string, isDone: boolean, todoListID: string) => void\r\n    changeTaskTitle: (taskID: string, newTitle: string, todoListID: string) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    changeTodolistTitle: (todoListID: string, newTitle: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n\r\n    const onAllCliCkHandler = () => {\r\n        props.changFilter('all', props.id)\r\n    }\r\n    const onActiveClickHandler = () => {\r\n        props.changFilter('active', props.id)\r\n    }\r\n    const onCompletedClickHandler = () => {\r\n        props.changFilter('comleted', props.id)\r\n    }\r\n    const removeTodoList = () => {\r\n        props.removeTodoList(props.id)\r\n    }\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n    const changeTitle = (newTitle: string) => {\r\n        props.changeTodolistTitle(props.id, newTitle)\r\n\r\n    }\r\n    return <div>\r\n\r\n        <h3><EditableSpan title={props.title} onChange={changeTitle}/>\r\n            {/*<button onClick={removeTodoList}> x</button>*/}\r\n            <Button onClick={removeTodoList}>\r\n                <Delete/>\r\n            </Button>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                props.tasks.map(t => {\r\n                    const onClickHandler = () => {\r\n                        props.removeTask(t.id, props.id)\r\n                    }\r\n                    const changeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        props.changeStatus(t.id, e.currentTarget.checked, props.id)\r\n                    }\r\n                    const changeTitle = (newTitle: string) => {\r\n                        props.changeTaskTitle(t.id, newTitle, props.id)\r\n                    }\r\n                    return (\r\n                        <div key={t.id} className={t.isDone ? \"isDone\" : \"\"}>\r\n                            <Checkbox\r\n                                defaultChecked\r\n                                color=\"primary\"\r\n                                inputProps={{'aria-label': 'secondary checkbox'}}\r\n                                checked={t.isDone}\r\n                                onChange={changeStatus}\r\n                            />\r\n                            <EditableSpan title={t.title} onChange={changeTitle}/>\r\n                            {/*  <button onClick={onClickHandler}> x</button>*/}\r\n                            <Button onClick={onClickHandler}>\r\n                                <Delete/>\r\n                            </Button>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n\r\n        </div>\r\n        <div style={{padding: \"10px\"}}>\r\n            <Button variant={props.filter === \"all\" ? \"contained\" : \"outlined\"} color=\"primary\"\r\n                    className={props.filter === \"all\" ? \"active\" : \"\"}\r\n                    onClick={onAllCliCkHandler}>All\r\n            </Button>\r\n            <Button variant={props.filter === \"active\" ? \"contained\" : \"outlined\"} color=\"primary\"\r\n                    className={props.filter === \"active\" ? \"active\" : \"\"}\r\n                    onClick={onActiveClickHandler}>Active\r\n            </Button>\r\n            <Button variant={props.filter === \"comleted\" ? \"contained\" : \"outlined\"} color=\"primary\"\r\n                    className={props.filter === \"comleted\" ? \"active\" : \"\"}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper} from \"@material-ui/core\";\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n        },\r\n        title: {\r\n            flexGrow: 1,\r\n        },\r\n    }),\r\n);\r\n\r\nexport type FilterValueType = 'all' | 'active' | 'comleted'\r\ntype TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValueType\r\n}\r\ntype TaskSstateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n\r\n    const [filter, setfilter] = useState<FilterValueType>(\"all\")\r\n\r\n    const todoListID1 = v1()\r\n    const todoListID2 = v1()\r\n    const [todolists, setTodolists] = useState<Array<TodolistType>>([\r\n        {id: todoListID1, title: \"What to learn\", filter: 'all'},\r\n        {id: todoListID2, title: \"What to buy\", filter: 'active'}\r\n\r\n    ])\r\n    const [tasks, setTasks] = useState<TaskSstateType>({\r\n        [todoListID1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"Redux\", isDone: false},\r\n            {id: v1(), title: \"Rest API\", isDone: false},\r\n\r\n        ],\r\n        [todoListID2]: [\r\n            {id: v1(), title: \"Milk\", isDone: false},\r\n            {id: v1(), title: \"Apple\", isDone: false},\r\n            {id: v1(), title: \"Orange\", isDone: false},\r\n        ]\r\n    })\r\n\r\n\r\n    function addTask(title: string, todoListID: string) {\r\n\r\n        let newTask: TaskType = {id: v1(), title: title, isDone: false}\r\n        const todolist = tasks[todoListID]\r\n        tasks[todoListID] = [newTask, ...todolist]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function removeTask(taskID: string, todoListID: string) {\r\n        const todolist = tasks[todoListID]\r\n        tasks[todoListID] = todolist.filter(t => t.id !== taskID)\r\n        setTasks({...tasks})\r\n\r\n    }\r\n\r\n    function removeTodoList(todoListID: string) {\r\n        let filteredTodoList = todolists.filter(tl => tl.id !== todoListID)\r\n        setTodolists(filteredTodoList)\r\n        let deletedTasks = delete tasks[todoListID]\r\n        setTasks({...tasks})\r\n        console.log(tasks)\r\n\r\n    }\r\n\r\n    function changeStatus(taskID: string, isDone: boolean, todoListID: string) {\r\n        const todolist = tasks[todoListID]\r\n        let newTodoList = todolist.map(task => {\r\n            if (task.id === taskID) {\r\n                return {...task, isDone: isDone}\r\n            }\r\n            return task\r\n        })\r\n        tasks[todoListID] = newTodoList\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function changFilter(value: FilterValueType, todoListID: string) {\r\n        const todolist = todolists.find(tl => tl.id === todoListID)\r\n        if (todolist) {\r\n            todolist.filter = value\r\n            setTodolists([...todolists])\r\n\r\n        }\r\n    }\r\n\r\n    function addTodolist(title: string) {\r\n        let todolist: TodolistType = {\r\n            id: v1(),\r\n            filter: \"all\",\r\n            title: title\r\n        }\r\n        setTodolists([todolist, ...todolists])\r\n        setTasks({\r\n            ...tasks,\r\n            [todolist.id]: []\r\n        })\r\n    }\r\n\r\n    function changeTaskTitle(taskID: string, newTitle: string, todoListID: string) {\r\n        const todolist = tasks[todoListID]\r\n        let newTodoList = todolist.map(task => {\r\n            if (task.id === taskID) {\r\n                return {...task, title: newTitle}\r\n            }\r\n            return task\r\n        })\r\n        tasks[todoListID] = newTodoList\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function changeTodolistTitle(todoListID: string, newTitle: string) {\r\n        const todoList = todolists.find(t => t.id === todoListID)\r\n        if (todoList) {\r\n            todoList.title = newTitle\r\n            setTodolists([...todolists])\r\n        }\r\n\r\n    }\r\n\r\n    const classes = useStyles();\r\n    return (\r\n\r\n        <div className=\"App\">\r\n            <Container fixed>\r\n\r\n                <AppBar position=\"static\">\r\n\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                            <MenuIcon/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\" className={classes.title}>\r\n                            News\r\n                        </Typography>\r\n                        <Button color=\"inherit\">Login</Button>\r\n                    </Toolbar>\r\n                </AppBar>\r\n\r\n                <Grid container style={{padding: \"10px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodoListTasks = tasks[tl.id]\r\n                            let taskForTodoList = allTodoListTasks;\r\n                            if (tl.filter === 'active') {\r\n                                taskForTodoList = allTodoListTasks.filter(t => t.isDone === false)\r\n                            }\r\n                            if (tl.filter === 'comleted') {\r\n                                taskForTodoList = allTodoListTasks.filter(t => t.isDone === true)\r\n                            }\r\n\r\n                            return (    <Grid item>\r\n                                <Paper  elevation={3} style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        key={tl.id}\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={taskForTodoList}\r\n                                        removeTask={removeTask}\r\n                                        changFilter={changFilter}\r\n                                        addTask={addTask}\r\n                                        changeStatus={changeStatus}\r\n                                        removeTodoList={removeTodoList}\r\n                                        filter={tl.filter}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}/>\r\n                                    </Paper>\r\n                                </Grid>\r\n                            )\r\n                        })\r\n                    }\r\n                </Grid>\r\n\r\n            </Container>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}